{
    "connections": [
        {
            "input": "table",
            "input_step": "Table Keep First Column and Random Others",
            "name": "table"
        },
        {
            "input": "outColumnCount",
            "input_step": "Table Keep First Column and Random Others",
            "name": "outColumnCount"
        },
        {
            "input": "intable",
            "input_step": "Table Replace undefined cells with NA",
            "output": "outtable",
            "output_step": "Replace Name Of First Column"
        },
        {
            "input": "datatable",
            "input_step": "Table Remove Ontology Name Prefixes",
            "output": "outTable",
            "output_step": "Table Keep First Column and Random Others"
        },
        {
            "input": "datatable",
            "input_step": "Replace Name Of First Column",
            "output": "outtable",
            "output_step": "Table Remove Ontology Name Prefixes"
        },
        {
            "name": "cleanTable",
            "output": "cleanTable",
            "output_step": "Table Replace undefined cells with NA"
        },
        {
            "input": "newNameTable",
            "input_step": "Replace Name Of First Column",
            "name": "newNameTable"
        }
    ],
    "description": "",
    "inputs": [
        {
            "format": "rows",
            "id": "table",
            "name": "table",
            "type": "table",
            "x": 4,
            "y": 77
        },
        {
            "description": "how many randomly selected columns should be kept in the output",
            "format": "number",
            "id": "outColumnCount",
            "name": "outColumnCount",
            "type": "number",
            "x": 3,
            "y": 193
        },
        {
            "description": "single row, single column table containing the new name in its only cell",
            "format": "rows",
            "id": "newNameTable",
            "name": "'taxa' parameter table",
            "type": "table",
            "x": 94,
            "y": 359
        }
    ],
    "mode": "workflow",
    "name": "WF PhyloTraits Matrix and Tree Display",
    "outputs": [
        {
            "format": "rows",
            "id": "cleanTable",
            "name": "Numeric / Renamed Trait Matrix",
            "type": "table",
            "x": 1277,
            "y": 157
        }
    ],
    "steps": [
        {
            "girderId": "56c646a656c02c0695a1ed16",
            "modified": "2016-02-18 22:38:20.382000",
            "name": "Table Keep First Column and Random Others",
            "task": {
                "description": "",
                "inputs": [
                    {
                        "format": "rows",
                        "id": "table",
                        "name": "table",
                        "type": "table"
                    },
                    {
                        "description": "how many randomly selected columns should be kept in the output",
                        "format": "number",
                        "id": "outColumnCount",
                        "name": "outColumnCount",
                        "type": "number"
                    }
                ],
                "mode": "python",
                "name": "Table Keep First Column and Random Others",
                "outputs": [
                    {
                        "format": "rows",
                        "id": "outTable",
                        "name": "outTable",
                        "type": "table"
                    }
                ],
                "script": "from random import randint\n#\n# pick random columns out of a table, according to the rowcount passed as an argument.  Always pick the column passed in a control table\n\n# inputs: \n#   table\n#   outRowCount - how many rows to pick from the input table\n#   keepColumns - table with names of columns to keep for sure\n# output: outTable\n\ntableColumnCount = len(table['fields'])\noutColumns = []\n\n# put the columns to keep in the output table.  Assume the first column of the keep table is the column names\n\noutColumns.append(table['fields'][0])\n\n# loop the number of times in the output colun count; selecting a random column each time\nfor i in range(outColumnCount):\n    pickedColumnNumber = randint(0,tableColumnCount-1)\n    pickedColumnName = table['fields'][pickedColumnNumber]\n    if  (pickedColumnName not in outColumns) and (pickedColumnName != table['fields'][0]):\n        print 'chose:',pickedColumnName\n        outColumns.append(pickedColumnName)\n\n# now copy the selected columns to the output\noutTable = {}\noutTable['fields'] = outColumns\noutTable['rows'] = []\n\nfor row in table['rows']:\n    record = {}\n    for column in outColumns:\n        record[column] = row[column]\n    outTable['rows'].append(record)    \n    \n    \n"
            },
            "visualization": false,
            "x": 251,
            "y": 141
        },
        {
            "girderId": "56c66e9556c02c0695a1ed42",
            "modified": "2016-02-19 01:23:33.089027",
            "name": "Replace Name Of First Column",
            "task": {
                "description": "",
                "inputs": [
                    {
                        "description": "table whose first column will be renamed",
                        "format": "rows",
                        "id": "datatable",
                        "name": "datatable",
                        "type": "table"
                    },
                    {
                        "description": "single row, single column table containing the new name in its only cell",
                        "format": "rows",
                        "id": "newNameTable",
                        "name": "newNameTable",
                        "type": "table"
                    }
                ],
                "mode": "python",
                "name": "Replace Name Of First Column",
                "outputs": [
                    {
                        "description": "table with updated first column name",
                        "format": "rows",
                        "id": "outtable",
                        "name": "outtable",
                        "type": "table"
                    }
                ],
                "script": "\n# replace the first column of a large table with a column name passed in a parameter table.  This \n# method doesn't care what value the first column has, it is changed to the passed name.  This is \n# useful in cases where column names are automatically created from taxonomies and have unknown or\n# dataset specific prefixes.\n\n# input: datatable - data table with lots of columns (relatively speaking)\n# input: newNameTable - single column, single row table containing the new name\n# output: outtable  \n\ninfields = datatable['fields']\n\n\noutfields = []\n\nrowOfNewNameTable = newNameTable['rows'][0]\nnewName = rowOfNewNameTable[newNameTable['fields'][0]]\n\nfor field in infields:\n    if field == datatable['fields'][0]:\n        outfields.append(newName)\n    else:\n        outfields.append(field)\n        \n\n# now loop through the source table and change the fieldname\n\noutrows = []\nfor row in datatable['rows']:\n    outrow = {}\n    for field in infields:\n        if field == datatable['fields'][0]:\n            outrow[newName] = row[field]\n        else:\n            outrow[field] = row[field]\n    outrows.append(outrow)\n        \nouttable = {}\nouttable['fields'] = outfields\nouttable['rows'] = outrows\n"
            },
            "visualization": false,
            "x": 743,
            "y": 103
        },
        {
            "girderId": "56c67df956c02c0695a1ed75",
            "modified": "2016-02-19 03:05:19.469711",
            "name": "Table Replace undefined cells with NA",
            "task": {
                "description": "",
                "inputs": [
                    {
                        "format": "rows",
                        "id": "intable",
                        "name": "Table with possible undefined cells",
                        "type": "table"
                    }
                ],
                "mode": "python",
                "name": "Table Replace undefined cells with NA",
                "outputs": [
                    {
                        "format": "rows",
                        "id": "cleanTable",
                        "name": "cleanTable",
                        "type": "table"
                    }
                ],
                "script": "#\n# loop through a table, which could have undefined cells.  If a cell is \n# undefined, assign the cell a value \"NA\", so the column isn't sparse anymore\n#\n\n# inputs:\n#   intable - a table that might have empty cells in it\n#\n# outputs:\n#    cleanTable \n\ncleanTable = {}\ncleanTable['fields'] = intable['fields']\ncleanTable['rows'] = []\n\nfor row in intable['rows']:\n    outrecord = {}\n    print 'row:',row\n    # loop through all columns, even if they aren't filled in this row\n    for field in intable['fields']:\n        # test if the variable is defined or not\n        if row[field] =='':\n            outrecord[field] = \"NA\"\n        else:\n            outrecord[field] = row[field]\n    cleanTable['rows'].append(outrecord)\n            \n    "
            },
            "visualization": false,
            "x": 977,
            "y": 157
        },
        {
            "girderId": "56c8c22992ccab03397bbc10",
            "modified": "2016-02-21 03:46:57.551454",
            "name": "Table Remove Ontology Name Prefixes",
            "task": {
                "description": "",
                "inputs": [
                    {
                        "description": "data table with long column names",
                        "format": "rows",
                        "id": "datatable",
                        "name": "matrix input with ontology prefix",
                        "type": "table"
                    }
                ],
                "mode": "python",
                "name": "Table Remove Ontology Name Prefixes",
                "outputs": [
                    {
                        "format": "rows",
                        "id": "outtable",
                        "name": "matrix with shorter column names",
                        "type": "table"
                    }
                ],
                "script": "# replace the names of all columns with simpler names.  This method assumes that each column name has a prefix with \n# 5 prefixes separated by dots \n\n# input: datatable - data table with long column names\n# output: outtable  \n\ninfields = datatable['fields']\n\noutfields = []\n\nnameMapping = {}\n\n# first build up a dictionary indexed by the previous string\nfor field in infields:\n    currentField = field\n    for count in range(5):\n        # see if there is a prefix left to delete\n        if \".\" in currentField:\n            currentField  = currentField[currentField.index(\".\")+1:]\n        else:\n            pass\n    nameMapping[field] = currentField\n    outfields.append(currentField)\n        \n# now loop through the source table and change the fieldnames when writing\n# the output\n\noutrows = []\nfor row in datatable['rows']:\n    outrow = {}\n    for field in infields:\n        # write out the fields using the new name for each attribute\n        outrow[nameMapping[field]] = row[field]\n    outrows.append(outrow)\n        \nouttable = {}\nouttable['fields'] = outfields\nouttable['rows'] = outrows\n"
            },
            "visualization": false,
            "x": 461,
            "y": 41
        }
    ]
}